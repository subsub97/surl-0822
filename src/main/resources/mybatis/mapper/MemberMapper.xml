<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.megastudy.surlkdh.domain.member.infrastructure.mybatis.mapper.MemberMapper">

    <resultMap id="MemberResultMap" type="com.megastudy.surlkdh.domain.member.infrastructure.mybatis.dto.MemberEntity">
        <id property="memberId" column="member_id" javaType="java.lang.Long"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="department" column="department_name"/>
        <result property="role" column="role"/>
        <result property="createdAt" column="created_at" javaType="java.time.LocalDateTime"/>
        <result property="updatedAt" column="updated_at" javaType="java.time.LocalDateTime"/>
        <result property="deletedAt" column="deleted_at" javaType="java.time.LocalDateTime"/>
    </resultMap>

    <sql id="Base_Column_List">
        member_id, email, password, department_name, role, created_at, updated_at, deleted_at
    </sql>

    <insert id="insert" useGeneratedKeys="true" keyProperty="memberId">
        INSERT INTO dbo.member(email, password, department_name, role, created_at, updated_at)
        VALUES (#{email}, #{password}, #{department}, #{role}, GETDATE(), GETDATE())
    </insert>

    <select id="findByEmail" resultMap="MemberResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM dbo.member
        WHERE email = #{email}
    </select>

    <select id="findById" resultMap="MemberResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM dbo.member
        WHERE member_id = #{id}
    </select>

    <!-- 관리자용 조회 시 삭제 필터링 X   -->
    <select id="countAll">
        SELECT COUNT(*)
        FROM member
    </select>

    <select id="findAll" resultMap="MemberResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM member

        <choose>
            <when test="pageable.sort.isSorted()">
                ORDER BY
                <foreach collection="pageable.sort" item="order" separator=",">
                    ${order.property} ${order.direction}
                </foreach>
            </when>
            <otherwise>
                ORDER BY member_id DESC
            </otherwise>
        </choose>

        OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
    </select>

    <update id="update">
        UPDATE member
        SET email = #{email},
        password = #{password},
        department_name = #{department},
        role = #{role},
        updated_at = #{updatedAt},
        deleted_at = #{deletedAt}
        WHERE member_id = #{memberId}
    </update>

</mapper>